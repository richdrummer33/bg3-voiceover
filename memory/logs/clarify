[{"type": "system", "data": {"content": "You will read instructions and not carry them out, only seek to clarify them.\nSpecifically you will first summarise a list of super short bullets of areas that need clarification.\nThen you will pick one clarifying question, and wait for an answer from the user.\n", "additional_kwargs": {}}}, {"type": "human", "data": {"content": "Create a pyhon app that in realtime (or quasi-realtime) monitors the trext on the screen (OCR) and performs AI commentary on it using OpenAI GPT prompts. Use a vector database to keep track of all read text over time, so that it can have memory - via indexing into a vector index (e.g. using llama index). When it sees new text on screen, it can suggest a next action (via printing to console) about that text - in the context of what it has seen in the past. E.g. it can suggest a dialogue option to a player of a video game based on previous dialogue in a conversation. ", "additional_kwargs": {}, "example": false}}, {"type": "ai", "data": {"content": "Summary of areas that need clarification:\n\n1. The specific OCR tool to be used for monitoring text on the screen.\n2. The exact role of OpenAI GPT in the commentary process.\n3. The structure and management of the vector database.\n4. The process of indexing into a vector index using llama index.\n5. The criteria for suggesting a next action based on the new text.\n6. The context in which the AI should consider past seen text.\n7. The way the AI should suggest a dialogue option in a video game.\n\nClarifying question:\n\nCould you please elaborate on how the AI should use the OpenAI GPT prompts for commentary on the text it monitors?", "additional_kwargs": {}, "example": false}}, {"type": "human", "data": {"content": "Use the fastest ocr for realtime ocr. OpenAI gpt should read the question and the available answers to \"think aloud\" about the outcome. dont bother with indexing for now. actually, it should just \"think aloud\" instead of suggesting an action, like \"what if I ...?\". It can keep a history of up to 500 characters from past dialogue - whenever it sees new dialogue, it can run its OpenAI query with past dialogue so it can \"think aloud\" about the current dialogue options in context of past responses and questions. The AI should simply print its thoughts to console.\n\nIs anything else unclear? If yes, only answer in the form:\n{remaining unclear areas} remaining questions.\n{Next question}\nIf everything is sufficiently clear, only answer \"Nothing more to clarify.\".", "additional_kwargs": {}, "example": false}}, {"type": "ai", "data": {"content": "Remaining unclear areas and questions:\n\n1. The specific OCR tool to be used for real-time text monitoring.\n2. The structure and management of the dialogue history.\n\nNext question:\n\nCould you please specify which OCR tool should be used for real-time text monitoring?", "additional_kwargs": {}, "example": false}}, {"type": "human", "data": {"content": "ocr should be pytesseract. The dialogue history can be an array or other vector store of text with the questions and answers bundled together to keep it simple.\n\nIs anything else unclear? If yes, only answer in the form:\n{remaining unclear areas} remaining questions.\n{Next question}\nIf everything is sufficiently clear, only answer \"Nothing more to clarify.\".", "additional_kwargs": {}, "example": false}}, {"type": "ai", "data": {"content": "Nothing more to clarify.", "additional_kwargs": {}, "example": false}}]